name: Fast CI

on:
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Ultra-fast checks that run in parallel
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [format, clippy, sort]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Setup sccache (optional)
      uses: mozilla-actions/sccache-action@v0.0.4
      continue-on-error: true
      with:
        version: latest
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-
    
    - name: Cache cargo bin
      uses: actions/cache@v3
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-cargo-bin

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev

    - name: Install cargo-sort (if needed)
      if: matrix.check == 'sort'
      run: |
        if ! command -v cargo-sort &> /dev/null; then
          cargo install cargo-sort --locked
        fi

    - name: Disable sccache if cache fails
      run: |
        if [ "$SCCACHE_GHA_ENABLED" = "true" ]; then
          echo "SCCACHE_GHA_ENABLED=false" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=" >> $GITHUB_ENV
        fi
      continue-on-error: true

    - name: Run ${{ matrix.check }}
      run: |
        case "${{ matrix.check }}" in
          "format")
            cargo fmt --all -- --check
            ;;
          "clippy")
            cargo clippy --all --all-targets --no-deps -- --deny warnings
            ;;
          "sort")
            cargo-sort --check
            ;;
        esac

  test:
    name: Test & Build
    runs-on: ubuntu-latest
    needs: quick-checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Setup sccache (optional)
      uses: mozilla-actions/sccache-action@v0.0.4
      continue-on-error: true
      with:
        version: latest
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev

    - name: Disable sccache if cache fails
      run: |
        if [ "$SCCACHE_GHA_ENABLED" = "true" ]; then
          echo "SCCACHE_GHA_ENABLED=false" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=" >> $GITHUB_ENV
        fi
      continue-on-error: true

    - name: Run tests
      run: cargo test --verbose

    - name: Build release
      run: cargo build --release --verbose